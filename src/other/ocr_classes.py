{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "E_lq73Z8vwh2"
   },
   "outputs": [],
   "source": [
    "pip install boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "laMlW4lFvzPX"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import shutil\n",
    "from shutil import copyfile\n",
    "import boto3\n",
    "import pandas as pd\n",
    "from PIL import Image\n",
    "import io\n",
    "import pysftp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "KncvQlhzv8e0"
   },
   "outputs": [],
   "source": [
    "class GetFiles():\n",
    "\n",
    "   def get_awsfiles(self,bucket_name,region,id,key):\n",
    "    try:\n",
    "      s3 = boto3.resource(service_name='s3',region_name=region,aws_access_key_id=id,aws_secret_access_key=key)\n",
    "      user_bucket = s3.Bucket(bucket_name)\n",
    "    except:\n",
    "      print('Error while fetching user S3 bucket')\n",
    "    for file in user_bucket.objects.all():\n",
    "      try:\n",
    "        user_bucket.download_file(file.key,f'/content/sample_data/{file.key}')\n",
    "      except:\n",
    "        print('Could not download file - {}'.format(file.key))\n",
    "\n",
    "    print('File download Completed')\n",
    "    \n",
    "\n",
    "    def get_localfiles(self,localfolder,storagefolderpath):\n",
    "      try:\n",
    "        folder = os.listdir(localfolder)\n",
    "      except:\n",
    "        print('No files in folder')\n",
    "      for file in folder:\n",
    "        try:\n",
    "          file_name = os.path.join(localfolder, file)\n",
    "          if os.path.isfile(file_name):\n",
    "              shutil.copy(file_name, storagefolderpath + file)\n",
    "        except:\n",
    "          print('Could not download file')\n",
    "      print('File Transfer Completed')\n",
    "\n",
    "\n",
    "class Pdf2Img_convertor(GetFiles): # Pdf to Image converter\n",
    "    \n",
    "    def __init__ (self, path, path1):\n",
    "        self.path = path\n",
    "        self.path1 = path1\n",
    "          \n",
    "    \n",
    "    def pdf_2_jpg(self):\n",
    "        \n",
    "        pdf_list = [self.path + '/'+f \n",
    "                     for f in os.listdir(self.path) \n",
    "                     if os.path.isfile(os.path.join(self.path, f))]\n",
    "        \n",
    "        print(\"Number of PDF=\"+str(len(pdf_list)))\n",
    "        \n",
    "#         pdf_list = [os.path.join(ip_path, f)\n",
    "#                 for f in os.listdir(ip_path)\n",
    "#                 if f.endswith('.pdf')]\n",
    "\n",
    "        # Counting the number of pages in each pdf and converting the pages into image\n",
    "        for file in pdf_list:\n",
    "            images = convert_from_path(file)\n",
    "            i = 1\n",
    "            length = len(images)\n",
    "\n",
    "            print(\"Number of pages in PDF=\"+str(length))\n",
    "\n",
    "        for image in images:\n",
    "            image.save(self.path1 + str(i) + '.jpg', 'Jpeg')\n",
    "            i = i + 1\n",
    "            \n",
    "    \n",
    "    def pdf_2_png(self):\n",
    "        \n",
    "        pdf_list = [os.path.join(self.path, f) \n",
    "                     for f in os.listdir(self.path) \n",
    "                     if os.path.isfile(os.path.join(self.path, f))]\n",
    "\n",
    "#         pdf_list = [os.path.join(ip_path, f)\n",
    "#                     for f in os.listdir(ip_path)\n",
    "#                     if f.endswith('.pdf')]\n",
    "\n",
    "        # Counting the number of pages in each pdf and converting the pages into image\n",
    "        for file in pdf_list:\n",
    "            images = convert_from_path(file)\n",
    "            i = 1\n",
    "            length = len(images)\n",
    "\n",
    "            print(\"Number of pages in PDF=\"+str(length))\n",
    "\n",
    "        for image in images:\n",
    "            image.save(self.path1 + str(i) + '.png', 'png')\n",
    "            i = i + 1\n",
    "\n",
    "class Img2pdf_convertor(GetFiles):  # Images to PDF converting\n",
    "    \n",
    "        \n",
    "    def __init__ (self, path, path1):\n",
    "        self.path = path\n",
    "        self.path1 = path1\n",
    "        \n",
    "    #PNG to PDF Conversion Function\n",
    "    def png_2_pdf(self):\n",
    "                \n",
    "        file_list = [os.path.join(self.path, f) \n",
    "                     for f in os.listdir(self.path) \n",
    "                     if os.path.isfile(os.path.join(self.path, f))]\n",
    "        \n",
    "#         for file in file_list:\n",
    "#             if file.endswith('.pdf'):\n",
    "#                 self.pdf_metadata(file)\n",
    "        \n",
    "        img_list = [os.path.join(self.path, file)\n",
    "                for file in os.listdir(self.path)\n",
    "                if file.endswith('.png')]\n",
    "        \n",
    "        print(\"Number of Images=\"+str(len(img_list)))\n",
    "\n",
    "        for i,path in enumerate(img_list):\n",
    "            image_1 = Image.open(path)\n",
    "            im_1 = image_1.convert('RGB')\n",
    "            im_1.save(self.path1+str(i)+'.pdf') \n",
    "        \n",
    "    #JPEG to PDF Conversion Function    \n",
    "    def jpg_2_pdf(self):\n",
    "\n",
    "        img_list = [os.path.join(self.path, file)\n",
    "                for file in os.listdir(self.path)\n",
    "                if file.endswith('.jpg')]\n",
    "        \n",
    "        print(\"Number of Images=\"+str(len(img_list)))\n",
    "\n",
    "        for i,path in enumerate(img_list):\n",
    "            new_image_1 = Image.open(path)\n",
    "            new_im_1 = new_image_1.convert('RGB')\n",
    "            new_im_1.save(self.path1+str(i)+'.pdf')\n",
    "    \n",
    "    # fuction to merge all pdfs into a single pdf in a given folder\n",
    "    def merge_pdf():\n",
    "\n",
    "        pdf_list = [os.path.join(self.path1, file)\n",
    "                for file in os.listdir(self.path1)\n",
    "                if file.endswith('.pdf')]\n",
    "\n",
    "        merger = PdfFileMerger()\n",
    "\n",
    "        for pdf in pdf_list:\n",
    "            \n",
    "            if not os.path.exists('my_folder'):\n",
    "                os.makedirs('my_folder')\n",
    "            merger.append(pdf)\n",
    "\n",
    "        merger.write('my_folder/result.pdf')\n",
    "        merger.close()\n",
    "        \n",
    "        # deleting extra pdfs\n",
    "        for j in range (len(pdf_list)):\n",
    "            os.remove(self.path1+str(j)+'.pdf')\n",
    "\n",
    "\n",
    "class Metadata_extraction():\n",
    "    \n",
    "    def __init__ (self, path):\n",
    "        self.path = path\n",
    "        \n",
    "    \n",
    "    def meta_extractor(self):\n",
    "\n",
    "        \n",
    "        file_list = [os.path.join(self.path, f) \n",
    "                     for f in os.listdir(IP_path) \n",
    "                     if os.path.isfile(os.path.join(IP_path, f))]\n",
    "        \n",
    "        for file in file_list:\n",
    "            if file.endswith('.pdf'):\n",
    "                self.pdf_metadata(file)\n",
    "                \n",
    "                #self.convert_bytes(os.path.getsize(file))\n",
    "                y = convert_bytes(os.path.getsize(file))\n",
    "                print('File size: ' + y)\n",
    "                \n",
    "                print('\\n')\n",
    "            else:\n",
    "                self.image_metadata(file)\n",
    "                #self.convert_bytes(os.path.getsize(file))\n",
    "                \n",
    "                y = convert_bytes(os.path.getsize(file))\n",
    "                print('File size: ' + y)\n",
    "                \n",
    "                print('\\n')\n",
    "            \n",
    "    # Size Conversion\n",
    "    def convert_bytes(self, size):\n",
    "\n",
    "        for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n",
    "            if size < 1024.0:\n",
    "                return \"%3.1f %s\" % (size, x)\n",
    "            size /= 1024.0\n",
    "            \n",
    "    # Image Metadata Extraction\n",
    "    def image_metadata(self, filename):\n",
    "        \n",
    "      #  for filename in img_list:\n",
    "        parser = createParser(filename)\n",
    "        metadata = extractMetadata(parser)\n",
    "        metadata = metadata.exportPlaintext()\n",
    "\n",
    "        print('Metadata of Image: ' + filename)\n",
    "        \n",
    "        for fields in metadata:\n",
    "            print(fields)\n",
    "                \n",
    "        #######################################################################\n",
    "        \n",
    "    # PDF Metadata Extraction\n",
    "    def pdf_metadata(self, filename):\n",
    "\n",
    "        pdf = PdfFileReader(filename)\n",
    "        info = pdf.getDocumentInfo()\n",
    "        \n",
    "        print('Metadata of Document: ' + filename)\n",
    "        \n",
    "        for fields in info:\n",
    "            print(fields+ \":\" + str(info[fields]))  \n",
    "        "
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "OCR_all classes.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
